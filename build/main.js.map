{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils\t\t\tfrom '@iobroker/adapter-core';\nimport YahkaIoPkgJson\t\tfrom 'iobroker.yahka/io-package.json';\nimport { sprintf }\t\t\tfrom 'sprintf-js';\n\n//\nimport { EventEmitter } from 'node:events';\ndeclare global {\n\t// eslint-disable-next-line @typescript-eslint/no-namespace\n\tnamespace ioBroker {\n\t\texport interface Adapter {\n\t\t\temit:\t\ttypeof EventEmitter.prototype.emit;\n\t\t}\n\t}\n}\n\n\n// DevCharacteristic\ninterface DevCharacteristic {\n\tname:\t\t\t\t\tstring,\n\tenabled?:\t\t\t\tboolean,\n\tinOutFunction:\t\t\tstring,\n\tinOutParameters:\t\tstring,\n\tconversionFunction?:\tstring,\n\tconversionParameters?:\t{ toHomeKit: string, toIOBroker: string },\n}\n\n// DevService\ninterface DevService {\n\ttype:\t\t\t\t\tstring,\n\tsubType:\t\t\t\tstring,\n\tname:\t\t\t\t\tstring,\n\tcharacteristics:\t\tDevCharacteristic[]\n}\n\n// DevConfig\ninterface DevConfig {\n\tconfigType:\t\t\t\tstring,\n\tcategory:\t\t\t\tstring,\n\tname:\t\t\t\t\tstring,\n\tmanufacturer:\t\t\tstring,\n\tserial:\t\t\t\t\tstring,\n\tmodel:\t\t\t\t\tstring,\n\tfirmware:\t\t\t\tstring,\n\tservices:\t\t\t\tDevService[],\n\tenabled:\t\t\t\tboolean\n}\n\n// ~~~~~~~~\n// AccCatId\n// ~~~~~~~~\n// AccCatId: { \"Lightbulb\": \"5\", \"Switch\": \"8\", \"Thermostat\": \"9\", \"Sensor\": \"10\", ... }\nconst AccCatId = Object.entries(YahkaIoPkgJson.objects[0].native).reduce((result: {[index: string]: string}, [key, val]) => {\n\tresult[val.text.replace(/ /g,'_')] = key;\n\treturn result;\n}, {});\n\n\n// ~~~~~~~~~~~\n// YahkaConfig\n// ~~~~~~~~~~~\nclass YahkaConfig extends utils.Adapter {\n\t// CONSTRUCTOR\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'yahka-config',\n\t\t});\n\t\tthis.on('ready',  this.onReady .bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\tconst mapping = this.config.mapping;\n\t\tthis.log.info(sprintf('%-30s %-20s %-50s', 'onReady()', 'mapping', '\\n'+JSON.stringify(mapping, null, 4)));\n\n\t\t// create configs\n\t\tfor (const [dstId, srcIdsObj] of Object.entries(mapping)) {\n\t\t\tconst srcIds = Object.entries(srcIdsObj).filter(entry => (entry[1] === true)).map(entry => entry[0]).sort();\n\t\t\tconst yahkaDstApt = await this.getForeignObjectAsync('system.adapter.' + dstId);\n\t\t\tif (! yahkaDstApt) {\n\t\t\t\tthis.log.warn(sprintf('%-30s %-20s %-50s', 'onReady()', ('system.adapter.'+dstId), 'not installed'));\n\t\t\t\tdelete mapping[dstId];\n\t\t\t} else {\n\t\t\t\tawait this.createYahkaConfig(yahkaDstApt, srcIds);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\t\t// clearTimeout(timeout1); ...\n\t\t} finally {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t// createYahkaConfig(yahkaDstApt, srcInsts)\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\tasync createYahkaConfig(yahkaDstApt: ioBroker.Object, srcInsts: string[]): Promise<void> {\t\t// e.g.: \"system.adapter.yahka.0\", [ \"fritzdect.0\", ... ]\n\t\tconst yahkaAptId = yahkaDstApt._id;\n\t\tthis.log.info(sprintf('%-30s %-20s\\n%s', 'createYahkaConfig()', yahkaAptId, JSON.stringify(srcInsts, null, 4)));\n\n\t\t// collect source state objects\n\t\tlet iobSrcObjs: ioBroker.StateObject[] = [];\n\t\tfor (let srcInst of srcInsts) {\n\t\t\tsrcInst += '.*';\n\t\t\tconst stateObjs  = await this.getForeignObjectsAsync(srcInst, 'state')  ||  {};\n\t\t\tconst stateRegEx = new RegExp(srcInst.replace(/\\./g, '\\\\.').replace(/\\*/g, '[^\\\\.]*'));\n\t\t\tconst statesArr  = Object.values(stateObjs).filter((obj) => (obj._id.match(stateRegEx) !== null));\n\t\t\tthis.log.info(sprintf('%-30s %-20s %-50s', 'createYahkaConfig()', '#'+statesArr.length, stateRegEx));\n\t\t\tiobSrcObjs = iobSrcObjs.concat(statesArr);\n\t\t}\n\t\tiobSrcObjs.sort((obj1, obj2) => (obj1._id > obj2._id) ? +1 : ((obj1._id < obj2._id) ? -1 : 0));\n\t\t//this.log.info(sprintf('%-30s %-20s %-50s %s', 'createYahkaConfig()', dstInst, 'yahkaObjs', '\\n'+JSON.stringify(yahkaObjs, null, 4)));\n\n\t\t// get yahkaNewDevs and enable/disable yahka configs\n\t\tconst yahkaNewDevs = await this.createYahkaDevs(iobSrcObjs);\n\t\tconst yahkaOldDevs = yahkaDstApt['native']['bridge']['devices']\tas {name: string, enabled: boolean}[];\n\t\t//this.log.info(sprintf('%-30s %-20s %-50s %s', 'createYahkaConfig()', dstInst, 'yahkaOldDevs', '\\n'+JSON.stringify(yahkaOldDevs, null, 4)));\n\t\t//this.log.info(sprintf('%-30s %-20s %-50s %s', 'createYahkaConfig()', dstInst, 'yahkaNewDevs', '\\n'+JSON.stringify(yahkaNewDevs, null, 4)));\n\n\t\t// get 'enabled' state from oldDev\t\t-\t\tyahka adapter uses 'name' to build homekit UUID\n\t\tfor (const yahkaNewDev of  yahkaNewDevs) {\n\t\t\tconst  yahkaOldDev  =  yahkaOldDevs.find(oldDev => (oldDev.name === yahkaNewDev.name));\n\t\t\tyahkaNewDev.enabled = (yahkaOldDev) ? yahkaOldDev.enabled : true;\n\t\t}\n\n\t\t// keep custom yahka device configs\t\t-\t\tyahka adapter uses 'name' to build homekit UUID\n\t\tlet yahkaChanged = false;\n\t\tfor (const yahkaOldDev of yahkaOldDevs) {\n\t\t\tconst keep = ! yahkaNewDevs.some((newDev) => (newDev.name === yahkaOldDev.name));\n\t\t\tif (keep) {\n\t\t\t\tthis.log.warn(sprintf('%-30s %-20s %-50s %s', 'createYahkaConfig()', 'keeping', yahkaOldDev.name, ''));\n\t\t\t\tyahkaNewDevs.push(yahkaOldDev);\n\t\t\t}\n\t\t}\n\n\t\t// yahkaChanged?\t\t\t\t\t\t-\t\tyahka adapter uses 'name' to build homekit UUID\n\t\tyahkaOldDevs.sort(sortBy('name'));\n\t\tyahkaNewDevs.sort(sortBy('name'));\n\t\tconst diff = objDiff(yahkaOldDevs, yahkaNewDevs, 'yahkaDevs');\n\t\tyahkaChanged = yahkaChanged  ||  (Object.values(diff).length > 0);\n\n\t\t// debug\n\t\tif (Object.values(diff).length > 0) {\n\t\t\tthis.log.info(sprintf('%-30s %-20s %-50s %s', 'createYahkaConfig()', yahkaAptId, 'diff', '\\n'+JSON.stringify(diff, null, 4)));\n\t\t}\n\n\t\t// save\n\t\tif (yahkaChanged) {\n\t\t\tthis.log.info(sprintf('%-30s %-20s %-50s %s', 'createYahkaConfig()', yahkaAptId, 'saving yahka devices ...', ''));\n\t\t\t//\tawait this.extendForeignObjectAsync(dstInst, { 'native': { 'bridge': { 'devices': yahkaNewDevs } } });\n\t\t\tyahkaDstApt['native']['bridge']['devices'] = yahkaNewDevs;\n\t\t\tawait this.setForeignObjectAsync(yahkaAptId, yahkaDstApt);\n\t\t}\n\t}\n\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t// createYahkaDevs(iobSrcObjs)\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\tasync createYahkaDevs(iobSrcObjs: ioBroker.StateObject[]): Promise<{name: string, enabled: boolean}[]> {\t\t// iobSrcObjs: array of iobroker objects\n\t\tthis.log.info(sprintf('%-30s %-20s %-50s', 'createYahkaDevs()', '#'+iobSrcObjs.length, '...'));\n\t\tconst yahkaNewDevs = [];\n\n\t\tif (! Array.isArray(iobSrcObjs)) {\n\t\t\tthis.log.warn(sprintf('%-30s %-20s %-50s %s', 'createYahkaDevs()', 'iobSrcObjs is not an arrray', '', ''));\n\n\t\t} else {\n\t\t\t// process array of iobSrcObjs\n\t\t\tfor (const iobSrcObj of iobSrcObjs) {\n\t\t\t\tconst yahkaNewDev = await this.createYahkaDev(iobSrcObj);\n\t\t\t\tif  ( yahkaNewDev ) {\n\t\t\t\t\tyahkaNewDevs.push(yahkaNewDev);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.log.info(sprintf('%-30s %-20s %-50s', 'createYahkaDevs()', '#'+iobSrcObjs.length, 'done.'));\n\t\treturn yahkaNewDevs;\n\t}\n\n\n\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~\n\t// createYahkaDev(iobSrcObj)\n\t// ~~~~~~~~~~~~~~~~~~~~~~~~~\n\tasync createYahkaDev(iobSrcObj: ioBroker.StateObject): Promise<DevConfig | null > {\t\t// iobObj: iobroker object\n\t\tconst objRole\t\t= iobSrcObj.common.role;\t\t\t\t\t// 'value.temperature'\n\t\tconst objName\t\t= iobSrcObj.common.name as string;\t\t\t// 'OG.K\u00FCche.targettemp'\n\t\tconst objValType\t= iobSrcObj.common.type;\t\t\t\t\t// 'string', 'boolean', 'number', ...\n\t\tconst objId\t\t\t= iobSrcObj._id;\t\t\t\t\t\t\t// 'fritzdect.0.DECT_099950049420.tsoll'\n\t\tconst idPath\t\t= objId.split('.');\t\t\t\t\t\t\t// [ 'fritzdect', '0', 'DECT_099950049420', 'tsoll' ]\n\t\tconst idBase\t\t= idPath.slice(0, -1).join('.');\t\t\t// 'fritzdect.0.DECT_099950049420'\n\t\tconst idLeaf\t\t= idPath.slice(   -1)[0];\t\t\t\t\t//                               'tsoll'\n\t\t//this.log.info(sprintf('%-30s %-20s %-50s', 'createYahkaDev()', objRole, objId));\n\n\t\t// yahka device config\n\t\tconst devCfg: DevConfig = {\n\t\t\t'configType':\t\t'customdevice',\t\t\t\t\t\t\t// buggy: will not show up in iOS\n\t\t\t'name':\t\t\t\tobjId,\t\t\t\t\t\t\t\t\t// NOTE: yahka adapter uses 'name' to build homekit UUID!\n\t\t\t'manufacturer':\t\tidPath.slice(0,2).join('.'),\t\t\t// visible within iOS home app\n\t\t\t'serial':\t\t\tidPath.slice(2  ).join('.'),\t\t\t// visible within iOS home app\n\t\t\t'model':\t\t\t'?',\t\t\t\t\t\t\t\t\t// visible within iOS home app\n\t\t\t'firmware':\t\t\t'?',\t\t\t\t\t\t\t\t\t// visible within iOS home app\n\t\t\t'category':\t\t\t'?',\n\t\t\t'services':\t\t\t[],\t\t\t\t\t\t\t\t\t\t// default\n\t\t\t'enabled':\t\t\ttrue\n\t\t};\n\n\t\t// ~~~~~~~~~~~~~~~~~~~~\n\t\t// danfoss-icon channel\n\t\t// ~~~~~~~~~~~~~~~~~~~~\n\t\tif (idPath[0] === 'danfoss-icon') {\n\n\t\t\t// danfoss-icon HousePause\n\t\t\t// ~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\tif (idLeaf === 'HousePause') {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// objId: danfoss-icon.0.House.HousePause\n\t\t\t\tdevCfg.model\t= 'danfoss-icon';\n\t\t\t\tdevCfg.firmware\t= '';\n\t\t\t\tdevCfg.category = AccCatId.Switch;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Switch', 'subType': '', 'name': objName,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'On',\t\t'inOutFunction': 'ioBroker.State.OnlyACK', 'inOutParameters': objId }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t// danfoss-icon room thermostat\n\t\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t} else if (idLeaf === 'TargetTemp') {\n\t\t\t\tconst nameId\t= `${idBase}.RoomName`;\t\t\t\t\t\t\t\t\t\t\t\t// 'danfoss-icon.0.room-01.RoomName'\n\t\t\t\tconst nameStr\t= (await this.getForeignStateAsync(nameId) || {}).val || '?';\t\t// 'Wohnzimmer'\n\t\t\t\tdevCfg.category\t= AccCatId.Thermostat;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Thermostat', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': nameId\t\t\t\t\t},\n\t\t\t\t\t\t\t{ 'name': 'TargetTemperature',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': idBase+'.TargetTemp'\t\t},\n\t\t\t\t\t\t\t{ 'name': 'CurrentTemperature',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': idBase+'.RoomTemp'\t\t},\n\t\t\t\t\t\t\t{ 'name': 'TemperatureDisplayUnits',\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': '0', \t\t\t\t\t},\n\t\t\t\t\t\t\t{ 'name': 'TargetHeatingCoolingState',\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': '3', \t\t\t\t\t},\n\t\t\t\t\t\t\t{ 'name': 'CurrentHeatingCoolingState',\t'inOutFunction': 'ioBroker.State',\t\t\t'inOutParameters': idBase+'.ValveState',\n\t\t\t\t\t\t\t\t'conversionFunction': 'script', 'conversionParameters': { 'toHomeKit': 'return (value) ? 1 : 2;', 'toIOBroker': 'return (value == 1);' }\n\t\t\t\t\t\t\t}\t\t// TargetHeatingCoolingState:\t\t0 := OFF, 1 := HEAT, 2 := COOL, 3 := AUTO\n\t\t\t\t\t\t]\t\t\t// CurrentHeatingCoolingState:\t\t0 := OFF, 1 := HEAT, 2 := COOL\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t// ~~~~~~~~~~~~~~\n\t\t// openweathermap\n\t\t// ~~~~~~~~~~~~~~\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// openweathermap.0.forecast.current.temperature\n\t\t} else if (idPath[0] === 'openweathermap'  &&  idPath[3] === 'current') {\t\t// openweathermap.0.forecast.current.humidity\n\t\t\tconst nameStr\t= objName.split('.').join(' ');\t\t\t\t\t\t\t\t// 'M41 Garten humidity'\n\t\t\tdevCfg.model\t= idPath.slice(2).join('.');\t\t\t\t\t\t\t\t// forecast.current.humidity\n\n\t\t\t// openweathermap current temperature\n\t\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\tif (idLeaf === 'temperature') {\n\t\t\t\tdevCfg.category = AccCatId.Sensor;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'TemperatureSensor', 'subType': '', 'name': nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t\t{ 'name': 'CurrentTemperature',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t// openweathermap current humidity\n\t\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t} else if (idLeaf === 'humidity') {\n\t\t\t\tdevCfg.category = AccCatId.Sensor;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'HumiditySensor', 'subType': '', 'name': nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t\t{ 'name': 'CurrentRelativeHumidity',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t// ~~~~~~~~~~~~\n\t\t// shelly state\n\t\t// ~~~~~~~~~~~~\n\t\t} else if (idPath[0] === 'shelly') {\n\t\t\tconst nameId\t= `${idBase}.ChannelName`;\n\t\t\tconst nameStr\t=    (await this.getForeignStateAsync(nameId) || {}).val || '?';\t\t\t// 'Terrassenlampen'\n\t\t\tdevCfg.model\t= ''+(await this.getForeignStateAsync(idPath.slice(0,-2).join('.') + '.type'   ) || {val:'?'}).val;\n\t\t\tdevCfg.firmware\t= ''+(await this.getForeignStateAsync(idPath.slice(0,-2).join('.') + '.version') || {val:'?'}).val;\n\n\t\t\t// shelly dimmer\n\t\t\tif (idLeaf === 'brightness') {\t\t\t\t\t\t\t\t\t\t// objId: 'shelly.0.SHDM-2#94B97E16BE61#1.lights.brightness'\n\t\t\t\tdevCfg.category = AccCatId.Lightbulb;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Lightbulb', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': nameId\t\t\t\t\t},\n\t\t\t\t\t\t\t{ 'name': 'On',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.Switch`\t\t},\n\t\t\t\t\t\t\t{ 'name': 'Brightness',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.brightness`\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t// shelly switch\n\t\t\t} else if (idLeaf === 'Switch'  &&  idPath[3].startsWith('Relay')) {\t\t// objId: 'shelly.0.SHPLG-S#6A0761#1.Relay0.Switch'\n\t\t\t\tdevCfg.model\t= ''+(await this.getForeignStateAsync(idPath.slice(0,-2).join('.') + '.type'   ) || {val:'?'}).val;\n\t\t\t\tdevCfg.firmware\t= ''+(await this.getForeignStateAsync(idPath.slice(0,-2).join('.') + '.version') || {val:'?'}).val;\n\t\t\t\tdevCfg.category = AccCatId.Switch;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Switch', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': nameId\t},\n\t\t\t\t\t\t\t{ 'name': 'On',\t\t'inOutFunction': 'ioBroker.State',\t\t\t'inOutParameters': objId\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t// ~~~~~~~~~~~~\n\t\t// sonoff state\n\t\t// ~~~~~~~~~~~~\n\t\t} else if (idPath[0] === 'sonoff'  &&  [ 'POWER1', 'POWER2', 'SI7021_Temperature', 'SI7021_Humidity' ].indexOf(idLeaf) >= 0) {\n\t\t\t// Sonoff Device Name\n\t\t\tconst nameStr\t=    (await this.getForeignStateAsync(`${idBase}.DeviceName`\t\t\t) || {}).val  ||  '?';\t\t// 'Keller Sensor'\n\t\t\tdevCfg.model\t= ''+(await this.getForeignStateAsync(`${idBase}.INFO.Info1_Module`\t) || {}).val  ||  '?';\t\t// 'Sonoff TH'\n\t\t\tdevCfg.firmware\t= ''+(await this.getForeignStateAsync(`${idBase}.INFO.Info1_Version`\t) || {}).val  ||  '?';\t\t// '12.1.1(tasmota)'\n\n\t\t\t// sonoff POWER1, POWER2\n\t\t\t// ~~~~~~~~~~~~~~~~~~~~~\n\t\t\tif ([ 'POWER1', 'POWER2' ].indexOf(idLeaf) >= 0) {\n\t\t\t\tdevCfg.category = AccCatId.Switch;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Switch', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t'inOutFunction': 'ioBroker.State',\t\t\t'inOutParameters': `${idBase}.DeviceName`\t},\n\t\t\t\t\t\t\t{ 'name': 'On',\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t// sonoff state value.temperature\n\t\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t} else if (idLeaf === 'SI7021_Temperature') {\n\t\t\t\tdevCfg.category = AccCatId.Sensor;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'TemperatureSensor', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'ioBroker.State',\t\t\t'inOutParameters': `${idBase}.DeviceName`\t},\n\t\t\t\t\t\t\t{ 'name': 'CurrentTemperature',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t// sonoff state value.humidity\n\t\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t} else if (idLeaf === 'SI7021_Humidity') {\n\t\t\t\tdevCfg.category = AccCatId.Sensor;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'HumiditySensor', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'ioBroker.State',\t\t\t'inOutParameters': `${idBase}.DeviceName`\t},\n\t\t\t\t\t\t\t{ 'name': 'CurrentRelativeHumidity',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t// ~~~~~~~~~~~~~~~~~~~\n\t\t// kernel state switch\n\t\t// ~~~~~~~~~~~~~~~~~~~\n\t\t} else if (idPath[0] === 'kernel'  &&  objRole  === 'switch') {\n\t\t\tdevCfg.category = AccCatId.Switch;\n\t\t\tdevCfg.services = [\n\t\t\t\t{\n\t\t\t\t\t'type': 'Switch', 'subType': '', 'name': objName,\t\t\t\t\t// objName:\t\te.g. 'Albi da'\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': objName\t},\n\t\t\t\t\t\t{ 'name': 'On',\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~\n\t\t// kernel state sensor.lux\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~\n\t\t} else if (idPath[0] === 'kernel'  &&  objRole === 'sensor.lux') {\n\t\t\tdevCfg.category = AccCatId.Sensor;\n\t\t\tdevCfg.services = [\n\t\t\t\t{\t// LightSensor\n\t\t\t\t\t'type': 'LightSensor', 'subType': '', 'name': objName,\t\t// objName:\t\te.g. ''\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': objName\t},\n\t\t\t\t\t\t{ 'name': 'CurrentAmbientLightLevel',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\n\t\t// ~~~~~~~~~\n\t\t// fritzdect\n\t\t// ~~~~~~~~~\n\t\t} else if (idPath[0] === 'fritzdect'  &&  [ 'tsoll', 'tist', 'celsius' ].includes(idLeaf)) {\t\t\t\t\t\t// 'fritzdect.0.......'\n\t\t\tconst nameStr\t=    (await this.getForeignStateAsync(`${idBase}.name`\t\t\t) || {}).val ||\t'?';\t\t// 'K\u00FCche OG'\n\t\t\tdevCfg.model\t= ''+(await this.getForeignStateAsync(`${idBase}.productname`\t) || {}).val ||\t'?';\t\t// 'FRITZ!DECT 301'\n\t\t\tdevCfg.firmware\t= ''+(await this.getForeignStateAsync(`${idBase}.fwversion`\t) || {}).val ||\t'?';\t\t// '05.02'\n\n\t\t\t// FRITZ!DECT 301\n\t\t\tif (devCfg.model === 'FRITZ!DECT 301') {\n\n\t\t\t\t// FRITZ!DECT 301 - Thermostat Device\n\t\t\t\tif (idLeaf === 'tsoll') {\n\t\t\t\t\tdevCfg.category\t= AccCatId.Thermostat;\n\t\t\t\t\tdevCfg.services = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'type': 'Thermostat', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t\t{ 'name': 'TemperatureDisplayUnits',\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': '0'\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.name`\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'TargetTemperature',\t\t\t'inOutFunction': 'ioBroker.State',\t\t\t'inOutParameters': `${idBase}.tsoll`\t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'CurrentTemperature',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.celsius` \t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'TargetHeatingCoolingState',\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': '3', \t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'CurrentHeatingCoolingState', 'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.heatingCoolingState`\t},\n\t\t\t\t\t\t\t]\t\t// TargetHeatingCoolingState:\t\t0 := OFF, 1 := HEAT, 2 := COOL, 3 := AUTO\n\t\t\t\t\t\t},\t\t\t// CurrentHeatingCoolingState:\t\t0 := OFF, 1 := HEAT, 2 := COOL\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'type': 'BatteryService', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t\t{ 'name': 'ChargingState',\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': '2'\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'BatteryLevel',\t\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.battery`\t\t},\n\t\t\t\t\t\t\t\t//{ 'name': 'StatusLowBattery',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.batterylow`\t},\n\t\t\t\t\t\t\t\t{ 'name': 'StatusLowBattery',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.battery`,\n\t\t\t\t\t\t\t\t\t'conversionFunction': 'script', 'conversionParameters': { 'toHomeKit': 'return (value <= 20);', 'toIOBroker': 'return false;' }\n\t\t\t\t\t\t\t\t}\t// fritzdect battery (level) [%]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\n\t\t\t\t// FRITZ!DECT 301 - Thermostat Temperature Sensor\n\t\t\t\t} else if (idLeaf === 'tist') {\n\t\t\t\t\tdevCfg.category\t= AccCatId.Thermostat;\n\t\t\t\t\tdevCfg.services = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'type': 'TemperatureSensor', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t\t{ 'name': 'CurrentTemperature',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.tist`\t},\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t// FRITZ!DECT 200 Switch\n\t\t\t} else if (devCfg.model === 'FRITZ!DECT 200'  &&  idLeaf === 'celsius') {\n\t\t\t\tdevCfg.category = AccCatId.Switch;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Switch', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t'inOutFunction': 'ioBroker.State',\t\t\t'inOutParameters': `${idBase}.name`\t\t},\n\t\t\t\t\t\t\t{ 'name': 'On',\t\t\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.state`\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'TemperatureSensor', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'CurrentTemperature',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': `${idBase}.celsius`\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t// FRITZ!DECT Repeater 100\n\t\t\t} else if (devCfg.model === 'FRITZ!DECT Repeater 100'  &&  idLeaf === 'celsius') {\n\t\t\t\tdevCfg.category = AccCatId.Sensor;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'TemperatureSensor', 'subType': '', 'name': ''+nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK', 'inOutParameters': `${idBase}.name`\t\t},\n\t\t\t\t\t\t\t{ 'name': 'CurrentTemperature',\t'inOutFunction': 'ioBroker.State.OnlyACK', 'inOutParameters': `${idBase}.celsius`\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t} else {\n\t\t\t\tthis.log.warn(sprintf('%-15s %-25s %-45s %s', 'ConfigureYahka', 'createYahkaDev()', objId, 'not implemented yet'));\n\t\t\t}\n\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t// tr064 boolean state/button\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t} else if (idPath[0] === 'tr-064'  &&  idPath[2] == 'states'  &&  (objRole === 'state'  ||  objRole === 'button')) {\n\t\t\tif (objValType === 'boolean'  &&  idLeaf !== 'wlan') {\t\t\t\t\t\t// idPath: e.g.:\t'tr-064.0.states.wps'\n\t\t\t\tconst nameStr\t= objName  ||  (idLeaf + ' ' + devCfg.model);\t\t\t// 'wps'\n\t\t\t\tdevCfg.model\t= idPath.slice(0, 2).join('.');\t\t\t\t\t\t\t//\t\t\t\t\t'tr-064.0'\n\t\t\t\tdevCfg.category\t= AccCatId.Switch;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Switch', 'subType': '', 'name': nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t\t{ 'name': 'On',\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t// tr064 devices active state\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t} else if (idPath[0] === 'tr-064'  &&  idPath[2] == 'devices'  &&  idLeaf == 'active'  &&  objRole === 'state') {\n\t\t\tconst nameStr\t= idPath[idPath.length - 2];\t\t\t\t\t// devCfg.name:\te.g.:\t'iPhone-Albi'\n\t\t\tdevCfg.model\t= idPath.slice(0, 2).join('.');\t\t\t\t\t// idPath:\t\te.g.:\t'tr-064.0.devices.iPhone-Albi.active'\n\t\t\tdevCfg.category\t= AccCatId.Sensor;\n\t\t\tdevCfg.services = [\n\t\t\t\t{\n\t\t\t\t\t'type': 'OccupancySensor', 'subType': '', 'name': nameStr,\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t{ 'name': 'OccupancyDetected',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\t\t\t/*\n\t\t\t\t\t'type': \"ContactSensor\", 'subType': '', 'name': nameStr,\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t{ 'name': \"ContactSensorState\",\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t}\n\t\t\t\t\t]\n\t\t\t\t\t'type': \"OccupancySensor\", 'subType': '', 'name': nameStr,\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t{ 'name': \"OccupancyDetected\",\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t}\n\t\t\t\t\t]\n\t\t\t\t\t'type': \"Switch\", 'subType': '', 'name': nameStr,\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t{ 'name': 'On',\t\t\t\t\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t}\n\t\t\t\t\t]\n\t\t\t\t\t'type': \"Doorbell\", 'subType': '', 'name': nameStr,\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t{ 'name': \"ProgrammableSwitchEvent\",\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t}\n\t\t\t\t\t]\n\t\t\t\t\t'type': \"OccupancySensor\", 'subType': '', 'name': nameStr,\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t{ 'name': \"OccupancyDetected\",\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t}\n\t\t\t\t\t]\n\t\t\t\t\t'type': \"MotionSensor\", 'subType': '', 'name': nameStr,\n\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': nameStr\t},\n\t\t\t\t\t\t{ 'name': \"MotionDetected\",\t\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': objId\t\t}\n\t\t\t\t\t]\n\t\t\t*/\n\n\t\t/*\n\t\t// ~~~~~~~~~\n\t\t// hue level\n\t\t// ~~~~~~~~~\n\t\t} else if (idPath[0] === 'hue'  &&  idLeaf === 'level') {\t\t\t\t\t\t// hue.0_P17.Philips_hue.Fensterlampe.level\n\t\t\tconst channelObj = await this.getForeignObjectAsync(idBase);\t\t\t\t// hue.0_P17.Philips_hue.Fensterlampe\n\n\t\t\tif (channelObj.common.role !== 'Room') {\n\t\t\t\tconst hueRole\t= channelObj['common'].role.replace(/\\./g, '_');\t\t// light_color\n\t\t\t\tconst hueId\t\t= channelObj['native'].id;\t\t\t\t\t\t\t\t// 4\n\t\t\t\tconst nameStr\t= channelObj['native'].name;\t\t\t\t\t\t\t// Fensterlampe\n\t\t\t\tidPath[3]\t\t= hueRole + '_' + hueId;\n\t\t\t\tdevCfg.model\t= idPath.slice(2, 4).join('.');\t\t\t\t\t\t\t// Philips_hue.Fensterlampe\n\n\t\t\t\t// hue level\n\t\t\t\t// ~~~~~~~~~\n\t\t\t\tdevCfg.category = AccCatId.Lightbulb;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Lightbulb', 'subType': '', 'name': nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t'inOutFunction': 'const',\t\t\t\t\t\t'inOutParameters': nameStr\t\t\t},\n\t\t\t\t\t\t\t{ 'name': 'On',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t\t'inOutParameters': idBase+'.on'\t\t},\n\t\t\t\t\t\t\t{ 'name': 'Brightness',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t\t'inOutParameters': idBase+'.level'\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t// hue-extended lights level\n\t\t// ~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t} else if (idPath[0] === 'hue-extended'  &&  idPath[2] === 'lights'  &&  idPath[4] === 'action'  &&  idLeaf === 'level') {\t\t\t\t// hue.0_P17.Philips_hue.Fensterlampe.level\n\t\t\tthis.log.warn(sprintf('%-30s %-20s %-50s', 'createYahkaDev()', 'not implemented', objId));\n\n\t\t// ~~~~~~~~~~~~~~~~~~\n\t\t// tradfri brightness\t\t-\t\tNOTE: not needed because tradfri exposes it's own homekit bridge!\n\t\t// ~~~~~~~~~~~~~~~~~~\n\t\t} else if (idPath[0] === 'tradfri'  &&  idLeaf === 'brightness') {\t\t\t\t\t\t// tradfri.0.L-65551.lightbulb.brightness\n\t\t\tconst deviceObj = await this.getForeignObjectAsync(idPath.slice(0, 3).join('.'));\t// tradfri.0.L-65551\n\t\t\tthis.log.info(sprintf('%-30s %-20s %-50s %s deviceObj %s', 'createYahkaDev()', objRole, idBase, idLeaf, JSON.stringify(deviceObj, null, 4)));\n\n\t\t\tif (deviceObj.native.type === 'lightbulb') {\n\t\t\t\tconst nameStr\t\t= deviceObj.common.name;\t\t\t\t\t\t\t\t\t// Fensterlampe\n\t\t\t\tdevCfg.manufacturer\t= deviceObj.native.manufacturer;\t\t\t\t\t\t\t// IKEA of Sweden\n\t\t\t\tdevCfg.model\t\t= deviceObj.native.modelNumber;\t\t\t\t\t\t\t\t// TRADFRI bulb E14 WS 470lm\n\t\t\t\tdevCfg.firmware\t\t= deviceObj.native.firmwareVersion;\t\t\t\t\t\t\t// 2.3.08\n\n\t\t\t\t// hue level\n\t\t\t\t// ~~~~~~~~~\n\t\t\t\tdevCfg.category = AccCatId.Lightbulb;\n\t\t\t\tdevCfg.services = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'Lightbulb', 'subType': '', 'name': nameStr,\n\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t{ 'name': 'Name',\t\t'inOutFunction': 'const',\t\t\t\t\t\t'inOutParameters': nameStr\t\t\t\t},\n\t\t\t\t\t\t\t{ 'name': 'On',\t\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t\t'inOutParameters': `${idBase}.state`\t\t},\n\t\t\t\t\t\t\t{ 'name': 'Brightness',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t\t'inOutParameters': `${idBase}.brightness`\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t// ~~~~~\n\t\t// zwave\n\t\t// ~~~~~\n\t\t} else if (idPath[0] === 'zwave') {\n\t\t\tconst nodeId   = idPath.slice(0, 3).join('.');\t\t\t\t\t// zwave.0.NODE3\n\t\t\tconst switchId = nodeId + '.SWITCH_BINARY.Switch_1';\t\t\t// zwave.0.NODE3.SWITCH_BINARY.Switch_1\n\t\t\tconst levelId  = nodeId + '.SWITCH_MULTILEVEL.Level_1';\t\t\t// zwave.0.NODE7.SWITCH_MULTILEVEL.Level_1\n\t\t\tdevCfg.model = idPath.slice(2, 4).join('.');\t\t\t\t\t//         NODE7.SWITCH_MULTILEVEL\n\n\t\t\tif (objId === switchId  ||  objId === levelId) {\n\t\t\t\t//const switchObj = (objId === switchId) ? iobObj :\tawait this.getForeignObjectAsync(switchId);\n\t\t\t\tconst nodeObj   =\t\t\t\t\t\t\t\t\tawait this.getForeignObjectAsync(nodeId);\n\t\t\t\tconst devName\t= nodeObj.common.name;\n\n\t\t\t\t// product \"FGWPE/F Wall Plug\",\t\t\t\t\t\t\tproducttype \"0x0600\",  productid \"0x1000\",  type \"Binary Switch\"\n\t\t\t\t// product \"FGWPE/F Wall Plug\",\t\t\t\t\t\t\tproducttype \"0x0600\",  productid \"0x1000\",  type \"Binary Power Switch\"\n\t\t\t\tif (objId === switchId  &&  nodeObj['native'].productid === '0x1000') {\n\t\t\t\t\tdevCfg.category = AccCatId.Switch;\n\t\t\t\t\tdevCfg.services = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'type': 'Switch', 'subType': '', 'name': nameStr,\n\t\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t\t{ 'name': 'Name',\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': devName\t},\n\t\t\t\t\t\t\t\t{ 'name': 'On',\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': switchId\t},\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\n\t\t\t\t// product \"FGD211 Universal Dimmer 500W\",\t\t\t\tproducttype \"0x0100\",  productid \"0x100a\",  type \"Multilevel Power Switch\"\n\t\t\t\t} else if (objId === levelId  &&  nodeObj['native'].type === 'Multilevel Power Switch') {\n\t\t\t\t\tdevCfg.category = AccCatId.Lightbulb;\n\t\t\t\t\tdevCfg.services = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'type': 'Lightbulb', 'subType': '', 'name': nameStr,\n\t\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t\t{ 'name': 'Name',\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': devName\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'Brightness',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': levelId,\n\t\t\t\t\t\t\t\t\t'conversionFunction':\t'script',\n\t\t\t\t\t\t\t\t\t'conversionParameters': {\n\t\t\t\t\t\t\t\t\t\t'toHomeKit':\t\t'return Math.min(100, Math.round(100 * value/ 99));',\n\t\t\t\t\t\t\t\t\t\t'toIOBroker':\t\t'return Math.min( 99, Math.round( 99 * value/100));',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//\"conversionFunction\": \"scaleInt\",\n\t\t\t\t\t\t\t\t\t//\"conversionParameters\": JSON.stringify({\n\t\t\t\t\t\t\t\t\t//\t'homekit.max':\t\t100,\n\t\t\t\t\t\t\t\t\t//\t'iobroker.max':\t\t99\n\t\t\t\t\t\t\t\t\t//})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t\t//\tconst levelObj  = (objId === levelId ) ? iobObj \t: await this.getForeignObjectAsync(levelId);\n\t\t\t\t\tconst switchObj = (objId === switchId) ? iobSrcObj\t: await this.getForeignObjectAsync(switchId);\n\t\t\t\t\tif (switchObj) {\n\t\t\t\t\t\tdevCfg.services[0].characteristics.push({\n\t\t\t\t\t\t\t'name':\t\t\t\t\t'On',\n\t\t\t\t\t\t\t'inOutFunction':\t\t'ioBroker.State.OnlyACK',\n\t\t\t\t\t\t\t'inOutParameters':\t\tswitchId\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdevCfg.services[0].characteristics.push({\n\t\t\t\t\t\t\t'name':\t\t\t\t\t'On',\n\t\t\t\t\t\t\t'inOutFunction':\t\t'ioBroker.State.OnlyACK',\n\t\t\t\t\t\t\t'inOutParameters':\t\tlevelId,\n\t\t\t\t\t\t\t'conversionFunction':\t'script',\n\t\t\t\t\t\t\t'conversionParameters': {\n\t\t\t\t\t\t\t\t'toHomeKit':\t\t'return (value) ? true : false;',\n\t\t\t\t\t\t\t\t'toIOBroker':\t\t'return (value) ?   99 :     0;'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t// product \"FGRM222 Roller Shutter Controller 2\",\t\tproducttype \"0x0301\",  productid \"0x1001\",  type \"Motor Control Class B\"\n\t\t\t\t} else if (objId === levelId  &&  nodeObj['native'].type === 'Motor Control Class B') {\n\t\t\t\t\tdevCfg.category = AccCatId.Window_covering;\n\t\t\t\t\tdevCfg.services = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'type': 'WindowCovering', 'subType': '', 'name': nameStr,\n\t\t\t\t\t\t\t'characteristics': [\n\t\t\t\t\t\t\t\t{ 'name': 'Name',\t\t\t\t'inOutFunction': 'const',\t\t\t\t\t'inOutParameters': devName\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'TargetPosition',\t\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': levelId,\n\t\t\t\t\t\t\t\t\t'conversionFunction': 'scaleInt', 'conversionParameters': '{ \"homekit.max\": 100, \"iobroker.max\": 99 }'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'CurrentPosition',\t'inOutFunction': 'ioBroker.State.OnlyACK',\t'inOutParameters': levelId,\n\t\t\t\t\t\t\t\t\t'conversionFunction': 'scaleInt', 'conversionParameters': '{ \"homekit.max\": 100, \"iobroker.max\": 99 }'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ 'name': 'PositionState',\t\t'inOutFunction': 'const',\t\t\t'inOutParameters': '2'\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\t\t*/\n\t\t}\n\n\t\t// enable all characteristics\n\t\tfor (const srv of devCfg.services) {\n\t\t\tfor (const chr of srv.characteristics) {\n\t\t\t\tchr.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (devCfg.services.length > 0) {\n\t\t\tthis.log.info(sprintf('%-30s %-20s %-50s', 'createYahkaDev()', 'created', devCfg.name));\n\t\t}\n\n\t\treturn (devCfg.services.length > 0) ? devCfg : null;\n\t}\n}\n\n\n// ~~~~~~~~~~~\n// sortBy(key)\n// ~~~~~~~~~~~\nfunction sortBy(key: string) {\n\treturn (a: {[index: string]: any}, b: {[index: string]: any}) => (a[key] > b[key]) ? +1 : ((a[key] < b[key]) ? -1 : 0);\n}\n\n\n// ~~~~~~~~~~~~~~~~~~~~~~~\n// objDiff(oldObj, newObj)\n// ~~~~~~~~~~~~~~~~~~~~~~~\ninterface DiffObj {\n\t[index: string]: {\n\t\told?:\tobject,\n\t\tnew?:\tobject,\n\t}\n}\nfunction objDiff(oldObj: {[index: string]: any}, newObj: {[index: string]: any}, path = '', diff: DiffObj = {}): object {\t\t// check if newObj values are same in oldObj\n\t//adapter.log.info(sprintf('%-30s %-20s %-50s %s', 'objDiff()', 'path', path, ''));\n\tif (oldObj === undefined) {\n\t\tdiff[path] = { 'new': newObj };\n\n\t} else if (newObj === undefined) {\n\t\tdiff[path] = { 'old': oldObj };\n\n\t} else if (Array.isArray(newObj)) {\n\t\tnewObj.forEach((val, idx) => {\n\t\t\tobjDiff(oldObj[idx], newObj[idx], path+'['+idx+']', diff);\n\t\t});\n\n\t} else if (newObj instanceof Object) {\n\t\tObject.keys(newObj).forEach((key) => {\t\t\t\t// loop trough newObj members\n\t\t\tobjDiff(oldObj[key], newObj[key], path+'.'+key, diff);\n\t\t});\n\n\t} else if (! Object.is(oldObj, newObj)) {\n\t\tdiff[path] = { 'old': oldObj, 'new': newObj };\n\t}\n\n\treturn diff;\n}\n\n\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new YahkaConfig(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new YahkaConfig())();\n}\n"],
  "mappings": "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",
  "names": ["YahkaIoPkgJson"]
}
